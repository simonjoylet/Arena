/* phxrpc_comp_dispatcher.h

 Generated by phxrpc_pb2service from comp.proto

 Please DO NOT edit unless you know exactly what you are doing.

*/

#include "phxrpc_comp_dispatcher.h"

#include <errno.h>

#include "comp.pb.h"
#include "phxrpc_comp_service.h"
#include "phxrpc/http.h"
#include "phxrpc/file.h"


CompDispatcher::CompDispatcher(CompService &service, phxrpc::DispatcherArgs_t *dispatcher_args)
        : service_(service), dispatcher_args_(dispatcher_args) {
}

CompDispatcher::~CompDispatcher() {
}

const phxrpc::BaseDispatcher<CompDispatcher>::MqttFuncMap &CompDispatcher::GetMqttFuncMap() {
    static phxrpc::BaseDispatcher<CompDispatcher>::MqttFuncMap mqtt_func_map = {
        {phxrpc::BaseMessage::Protocol::MQTT_CONNECT, &CompDispatcher::PhxMqttConnect},
        {phxrpc::BaseMessage::Protocol::MQTT_PUBLISH, &CompDispatcher::PhxMqttPublish},
        {phxrpc::BaseMessage::Protocol::MQTT_DISCONNECT, &CompDispatcher::PhxMqttDisconnect}};
    return mqtt_func_map;
}

const phxrpc::BaseDispatcher<CompDispatcher>::URIFuncMap &CompDispatcher::GetURIFuncMap() {
    static phxrpc::BaseDispatcher<CompDispatcher>::URIFuncMap uri_func_map = {
        {"/magna/PhxEcho", &CompDispatcher::PhxEcho},
        {"/magna/Handle", &CompDispatcher::Handle}};
    return uri_func_map;
}

int CompDispatcher::PhxMqttConnect(const phxrpc::BaseRequest *const req, phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(-201, "PhxMqttConnect", 1);

    int ret{0};

    phxrpc::MqttConnectPb req_pb;
    phxrpc::MqttConnackPb resp_pb;

    // unpack request
    {
        phxrpc::ReturnCode ret_code{req->ToPb(&req_pb)};
        if (phxrpc::ReturnCode::OK != ret_code) {
            phxrpc::log(LOG_ERR, "ToPb ip %s err %d", req->GetClientIP(), static_cast<int>(ret_code));

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.PhxMqttConnect(req_pb, &resp_pb);
        }
    }

    // pack response
    {
        phxrpc::ReturnCode ret_code{resp->FromPb(resp_pb)};
        if (phxrpc::ReturnCode::OK != ret_code) {
            phxrpc::log(LOG_ERR, "FromPb ip %s err %d", req->GetClientIP(), static_cast<int>(ret_code));

            return -ENOMEM;
        }
    }

    phxrpc::log(LOG_DEBUG, "ret %d", ret);

    return ret;
}

int CompDispatcher::PhxMqttPublish(const phxrpc::BaseRequest *const req, phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(-202, "PhxMqttPublish", 1);

    int ret{0};

    phxrpc::MqttPublishPb req_pb;
    phxrpc::MqttPubackPb resp_pb;

    // unpack request
    {
        phxrpc::ReturnCode ret_code{req->ToPb(&req_pb)};
        if (phxrpc::ReturnCode::OK != ret_code) {
            phxrpc::log(LOG_ERR, "ToPb ip %s err %d", req->GetClientIP(), static_cast<int>(ret_code));

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.PhxMqttPublish(req_pb, &resp_pb);
        }
    }

    // pack response
    {
        phxrpc::ReturnCode ret_code{resp->FromPb(resp_pb)};
        if (phxrpc::ReturnCode::OK != ret_code) {
            phxrpc::log(LOG_ERR, "FromPb ip %s err %d", req->GetClientIP(), static_cast<int>(ret_code));

            return -ENOMEM;
        }
    }

    phxrpc::log(LOG_DEBUG, "ret %d", ret);

    return ret;
}

int CompDispatcher::PhxMqttDisconnect(const phxrpc::BaseRequest *const req, phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(-207, "PhxMqttDisconnect", 1);

    int ret{0};

    phxrpc::MqttDisconnectPb req_pb;

    // unpack request
    {
        phxrpc::ReturnCode ret_code{req->ToPb(&req_pb)};
        if (phxrpc::ReturnCode::OK != ret_code) {
            phxrpc::log(LOG_ERR, "ToPb ip %s err %d", req->GetClientIP(), static_cast<int>(ret_code));

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.PhxMqttDisconnect(req_pb);
        }
    }

    phxrpc::log(LOG_DEBUG, "ret %d", ret);

    return ret;
}

int CompDispatcher::PhxEcho(const phxrpc::BaseRequest *const req, phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(-1, "PhxEcho", 1);

    int ret{0};

    google::protobuf::StringValue req_pb;
    google::protobuf::StringValue resp_pb;

    // unpack request
    {
        if (!req_pb.ParseFromString(req->GetContent())) {
            phxrpc::log(LOG_ERR, "ERROR: FromBuffer fail size %zu ip %s",
                req->GetContent().size(), req->GetClientIP());
            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) ret = service_.PhxEcho(req_pb, &resp_pb);
    }

    // pack response
    {
        if (!resp_pb.SerializeToString(&(resp->GetContent()))) {
            phxrpc::log(LOG_ERR, "ERROR: ToBuffer fail ip %s", req->GetClientIP());
            return -ENOMEM;
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: PhxEcho = %d", ret);

    return ret;
}

int CompDispatcher::Handle(const phxrpc::BaseRequest *const req, phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(-1, "Handle", 1);

    int ret{0};

    magna::AppRequest req_pb;
    magna::AppResponse resp_pb;

    // unpack request
    {
        if (!req_pb.ParseFromString(req->GetContent())) {
            phxrpc::log(LOG_ERR, "ERROR: FromBuffer fail size %zu ip %s",
                req->GetContent().size(), req->GetClientIP());
            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) ret = service_.Handle(req_pb, &resp_pb);
    }

    // pack response
    {
        if (!resp_pb.SerializeToString(&(resp->GetContent()))) {
            phxrpc::log(LOG_ERR, "ERROR: ToBuffer fail ip %s", req->GetClientIP());
            return -ENOMEM;
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: Handle = %d", ret);

    return ret;
}

int CompDispatcher::Handle_Post(const phxrpc::BaseRequest *const req, phxrpc::BaseResponse *const resp)
{
	int ret = 0;

	magna::AppRequest req_post;
	magna::AppResponse resp_post;

	// unpack request
	{
		// TODO
		printf("[DBEUG] received handle request via POST\n");
		req_post.set_id(1024);
		req_post.set_clienttype(3);
		req_post.set_servicename("COMP1");
		
	}

	// logic process
	{
		if (0 == ret) ret = service_.Handle(req_post, &resp_post);
	}

	// pack response
	{
		// TODO
		std::string * content = &resp->GetContent();
		content->append(resp_post.DebugString());
	}

	phxrpc::log(LOG_DEBUG, "RETN: Handle = %d", ret);

	return ret;
}

