/* admin_service_impl.cpp

 Generated by phxrpc_pb2service from admin.proto

*/

#include "admin_service_impl.h"

#include "admin_server_config.h"
#include "admin.pb.h"
#include "phxrpc/file.h"
#include "AdminData.h"
#include <mutex>


AdminServiceImpl::AdminServiceImpl(ServiceArgs_t &app_args)
    : args_(app_args) {
}

AdminServiceImpl::~AdminServiceImpl() {
}

int AdminServiceImpl::PhxMqttConnect(const phxrpc::MqttConnectPb &req, phxrpc::MqttConnackPb *resp) {
    return 0;
}

int AdminServiceImpl::PhxMqttPublish(const phxrpc::MqttPublishPb &req, phxrpc::MqttPubackPb *resp) {
    // TODO: process req.content()

    return -1;
}

int AdminServiceImpl::PhxMqttDisconnect(const phxrpc::MqttDisconnectPb &req) {
    return 0;
}

int AdminServiceImpl::PhxEcho(const google::protobuf::StringValue &req, google::protobuf::StringValue *resp) {
    resp->set_value(req.value());

    return 0;
}

int AdminServiceImpl::RegisterNode(const magna::RegisterNodeRequest &req, magna::RegisterNodeResponse *resp) {
	localdata::NodeInfo nodeInfo;
	nodeInfo.addr.ip = req.addr().ip();
	nodeInfo.addr.port = req.addr().port();
	nodeInfo.mips = req.mips();

	extern phxrpc::ClientConfig global_nodeclient_config_;
	extern std::mutex * g_nodelist_mutex;
	phxrpc::Endpoint_t ep;
	snprintf(ep.ip, sizeof(ep.ip), "%s", nodeInfo.addr.ip.c_str());
	ep.port = nodeInfo.addr.port;

	g_nodelist_mutex->lock();
	global_nodeclient_config_.Add(ep);
	AdminData::GetInstance()->m_nodeList.insert(make_pair(req.addr().ip(), nodeInfo));
	g_nodelist_mutex->unlock();
	
	resp->set_ack(true);
	resp->set_msg("Register success");
    return 0;
}

int AdminServiceImpl::NodeHeatbeat(const magna::NodeHeartbeatRequest &req, magna::NodeHeartbeatResponse *resp) {
	map<string, localdata::NodeStatus> & statusList = AdminData::GetInstance()->m_nodeStatus;

	if (statusList.find(req.addr().ip()) != statusList.end())
	{
		printf("\nNode not registered: %s\n", req.addr().ip().c_str());
		resp->set_ack(false);
		resp->set_msg("Node not found");
	}
	else
	{
		localdata::NodeStatus & nodeStatus = statusList.find(req.addr().ip())->second;
		nodeStatus.cpuload = req.load().cpu();
		auto rtt = req.load().rtt();
		if (rtt.size() > 0)
		{
			nodeStatus.netrtt.clear();
		}
		for (auto it = rtt.begin(); it != rtt.end(); ++it)
		{
			nodeStatus.netrtt.insert(make_pair(it->first, it->second));
		}
		
		resp->set_ack(true);
		resp->set_msg("success");

		printf("\nNode status updated: %s cpu: %f\n", req.addr().ip().c_str(), req.load().cpu());
	}
    return 0;
}

int AdminServiceImpl::RegisterService(const magna::RegisterServiceRequest &req, magna::RegisterServiceResponse *resp) {
    return -1;
}

int AdminServiceImpl::ServiceHeatbeat(const magna::ServiceHeartbeatRequest &req, magna::ServiceHeartbeatResponse *resp) {
    return -1;
}

int AdminServiceImpl::Handle(const magna::AppRequest &req, magna::AppResponse *resp) {
	
	resp->set_id(req.id());
	resp->set_ack(true);
	usleep(1000);
	return 0;
}

