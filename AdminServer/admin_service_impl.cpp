/* admin_service_impl.cpp

 Generated by phxrpc_pb2service from admin.proto

*/

#include "admin_service_impl.h"

#include "admin_server_config.h"
#include "admin.pb.h"
#include "phxrpc/file.h"
#include "AdminData.h"


AdminServiceImpl::AdminServiceImpl(ServiceArgs_t &app_args)
    : args_(app_args) {
}

AdminServiceImpl::~AdminServiceImpl() {
}

int AdminServiceImpl::PhxMqttConnect(const phxrpc::MqttConnectPb &req, phxrpc::MqttConnackPb *resp) {
    return 0;
}

int AdminServiceImpl::PhxMqttPublish(const phxrpc::MqttPublishPb &req, phxrpc::MqttPubackPb *resp) {
    // TODO: process req.content()

    return -1;
}

int AdminServiceImpl::PhxMqttDisconnect(const phxrpc::MqttDisconnectPb &req) {
    return 0;
}

int AdminServiceImpl::PhxEcho(const google::protobuf::StringValue &req, google::protobuf::StringValue *resp) {
    resp->set_value(req.value());

    return 0;
}

int AdminServiceImpl::RegisterNode(const magna::RegisterNodeRequest &req, magna::RegisterNodeResponse *resp) {
	localdata::NodeInfo nodeaddr;
	nodeaddr.addr.ip = req.addr().ip();
	nodeaddr.addr.port = req.addr().port();
	nodeaddr.mips = req.mips();
	AdminData::GetInstance()->m_nodeList.insert(make_pair(req.addr().ip(), nodeaddr));
	resp->set_ack(true);
	resp->set_msg("Register success");
    return 0;
}

int AdminServiceImpl::NodeHeatbeat(const magna::NodeHeartbeatRequest &req, magna::NodeHeartbeatResponse *resp) {
	printf("\nNode heatbeat received. req: {%s}\n", req.DebugString().c_str());
	resp->set_ack(true);
	resp->set_msg("success");
    return 0;
}

int AdminServiceImpl::RegisterService(const magna::RegisterServiceRequest &req, magna::RegisterServiceResponse *resp) {
    return -1;
}

int AdminServiceImpl::ServiceHeatbeat(const magna::ServiceHeartbeatRequest &req, magna::ServiceHeartbeatResponse *resp) {
    return -1;
}

