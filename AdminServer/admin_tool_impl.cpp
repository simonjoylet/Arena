/* admin_tool_impl.cpp

 Generated by phxrpc_pb2tool from admin.proto

*/

#include "admin_tool_impl.h"
#include "admin_client.h"

#include "phxrpc/file.h"

using namespace phxrpc;

AdminToolImpl:: AdminToolImpl()
{
}

AdminToolImpl:: ~AdminToolImpl()
{
}

int AdminToolImpl :: PHXEcho( phxrpc::OptMap & opt_map )
{
    google::protobuf::StringValue req;
    google::protobuf::StringValue resp;

    if( NULL == opt_map.Get( 's' ) ) return -1;

    req.set_value( opt_map.Get( 's' ) );

    AdminClient client;
    int ret = client.PHXEcho( req, &resp );
    printf( "%s return %d\n", __func__, ret );
    printf( "resp: {\n%s}\n", resp.DebugString().c_str() );

    return ret;
}

int AdminToolImpl :: RegisterNode( phxrpc::OptMap & opt_map )
{
    magna::RegisterNodeRequest req;
    magna::RegisterNodeResponse resp;

    //TODO: fill req from opt_map


    AdminClient client;
    int ret = client.RegisterNode( req, &resp );
    printf( "%s return %d\n", __func__, ret );
    printf( "resp: {\n%s}\n", resp.DebugString().c_str() );

    return ret;
}

int AdminToolImpl :: NodeHeatbeat( phxrpc::OptMap & opt_map )
{
    magna::NodeHeartbeatRequest req;
    magna::NodeHeartbeatResponse resp;

    //TODO: fill req from opt_map


    AdminClient client;
    int ret = client.NodeHeatbeat( req, &resp );
    printf( "%s return %d\n", __func__, ret );
    printf( "resp: {\n%s}\n", resp.DebugString().c_str() );

    return ret;
}

int AdminToolImpl :: RegisterService( phxrpc::OptMap & opt_map )
{
    magna::RegisterServiceRequest req;
    magna::RegisterServiceResponse resp;

    //TODO: fill req from opt_map


    AdminClient client;
    int ret = client.RegisterService( req, &resp );
    printf( "%s return %d\n", __func__, ret );
    printf( "resp: {\n%s}\n", resp.DebugString().c_str() );

    return ret;
}

int AdminToolImpl :: ServiceHeatbeat( phxrpc::OptMap & opt_map )
{
    magna::ServiceHeartbeatRequest req;
    magna::ServiceHeartbeatResponse resp;

    //TODO: fill req from opt_map


    AdminClient client;
    int ret = client.ServiceHeatbeat( req, &resp );
    printf( "%s return %d\n", __func__, ret );
    printf( "resp: {\n%s}\n", resp.DebugString().c_str() );

    return ret;
}

