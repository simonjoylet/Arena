syntax = "proto3";

package magna;

import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";
import "phxrpc/rpc/phxrpc.proto";

message InetAddress
{
	string ip = 1;
	int32 port = 2;
}

message RegisterNodeRequest
{
	InetAddress addr = 1;
	int32 type = 2;	// 实例类型，分为标准实例和大型实例。
}

message RegisterNodeResponse
{
	bool ack = 1;
	string msg = 2;
}

message NodeStatus
{
	float cpu = 1; // cpu负载
	float disk = 2; // 磁盘负载
	map<string, int32> rtt = 3; // 到各个节点的往返时间
}

message NodeHeartbeatRequest
{
	InetAddress addr = 1;
	NodeStatus load = 2;
}

message NodeHeartbeatResponse
{
	bool ack = 1;
	string msg = 2;
	repeated InetAddress allNodes = 3; // 所有节点，用于通过echo服务测rtt
}

message RegisterServiceRequest
{
	InetAddress addr = 1;
	string serviceName = 2;
}

message RegisterServiceResponse
{
	bool ack = 1;
	string msg = 2;
	int32 serviceId = 3; // 对每个服务分配唯一id
}

//message InterfaceData
//{
//	string name = 1;
//	double lamda = 2; // 单位qps
//	double averageTime = 3; // 单位ms	
//}

message ServiceHeartbeatRequest
{
	int32 serviceId = 1;
	int32 lamda = 2; // 单位qps
	int32 queueLength = 3; // 队列长度
	// map<string, InterfaceData> services = 2;
}

message ServiceHeartbeatResponse
{
	bool ack = 1;
	string msg = 2;
}

message ServiceScale
{
	string name = 1;
	InetAddress ep = 2;
	double percentage = 3;
}

message ServiceTableRequest
{
	
}

message ServiceTableResponse
{
	repeated ServiceScale routerTable = 1;
}

// 提供部署分布式软件的功能。
service Admin
{
	// 对节点代理提供的服务
	rpc RegisterNode (RegisterNodeRequest) returns (RegisterNodeResponse);
	rpc NodeHeatbeat (NodeHeartbeatRequest) returns (NodeHeartbeatResponse);

	rpc RegisterService (RegisterServiceRequest) returns (RegisterServiceResponse);
	rpc ServiceHeatbeat (ServiceHeartbeatRequest) returns (ServiceHeartbeatResponse);

	rpc GetServiceTable(ServiceTableRequest) returns (ServiceTableResponse);
}


