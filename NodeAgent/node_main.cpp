/* node_main.cpp

 Generated by phxrpc_pb2server from node.proto

*/

#include <iostream>
#include <memory>
#include <unistd.h>
#include <signal.h>

#include "phxrpc_node_dispatcher.h"
#include "node_service_impl.h"
#include "node_server_config.h"

#include "phxrpc/rpc.h"
#include "phxrpc/msg.h"
#include "phxrpc/file.h"
#include "../AdminServer/admin_client.h"
#include "HeartbeatThread.h"

using namespace std;

AdminClient * g_adminProxy;


void Dispatch(const phxrpc::BaseRequest *request,
              phxrpc::BaseResponse *response,
              phxrpc::DispatcherArgs_t *args) {
    ServiceArgs_t *service_args = (ServiceArgs_t *)(args->service_args);

    NodeServiceImpl service(*service_args);
    NodeDispatcher dispatcher(service, args);

    phxrpc::BaseDispatcher<NodeDispatcher> base_dispatcher(
            dispatcher, NodeDispatcher::GetMqttFuncMap(),
            NodeDispatcher::GetURIFuncMap());
    if (!base_dispatcher.Dispatch(request, response)) {
        response->DispatchErr();
    }
}

void ShowUsage(const char *program) {
    printf("\n");
    printf("Usage: %s [-c <config>] [-d] [-l <log level>] [-v]\n", program);
    printf("\n");

    exit(0);
}

bool testAdminEcho()
{
	g_adminProxy = new AdminClient;
	//AdminClient ac;
	google::protobuf::StringValue req;
	google::protobuf::StringValue resp;
	req.set_value("Access AdminServer Success");
	int ret = g_adminProxy->PhxEcho(req, &resp);
	printf("AdminServer.PhxEcho return %d\n", ret);
	printf("resp: {\n%s}\n", resp.DebugString().c_str());
	return ret == 0;
}


int main(int argc, char **argv) {
    const char *config_file{nullptr};
    bool daemonize{false};
    int log_level{-1};
    extern char *optarg;
    int c;
    while (EOF != (c = getopt(argc, argv, "c:vl:d"))) {
        switch (c) {
            case 'c' : config_file = optarg; break;
            case 'd' : daemonize = true; break;
            case 'l' : log_level = atoi(optarg); break;

            case 'v' :
            default: ShowUsage(argv[0]); break;
        }
    }

    if (daemonize) phxrpc::ServerUtils::Daemonize();

    assert(signal(SIGPIPE, SIG_IGN) != SIG_ERR);

    //set customize log/monitor
    //phxrpc::setlog(openlog, closelog, vlog);
    //phxrpc::MonitorFactory::SetFactory(new YourSelfsMonitorFactory());

    if (nullptr == config_file) ShowUsage(argv[0]);

    NodeServerConfig config;
    if (!config.Read(config_file)) ShowUsage(argv[0]);

    if (log_level > 0) config.GetHshaServerConfig().SetLogLevel(log_level);

    phxrpc::openlog(argv[0], config.GetHshaServerConfig().GetLogDir(),
            config.GetHshaServerConfig().GetLogLevel());

	AdminClient::Init("../AdminServer/admin_client.conf");
	bool adminOK = testAdminEcho();
	if (adminOK)
	{
		//AdminClient ac;
		magna::RegisterNodeRequest req;
		magna::RegisterNodeResponse rsp;
		req.mutable_addr()->set_ip("127.0.0.1");
		req.mutable_addr()->set_port(16161);
		int ret = g_adminProxy->RegisterNode(req, &rsp);
		printf("AdminServer.RegisterNode return %d\n", ret);
		printf("resp: {\n%s}\n", rsp.DebugString().c_str());
	}

	int hbRet = HeartbeatThread::GetInstance()->Start();

    ServiceArgs_t service_args;
    service_args.config = &config;

    phxrpc::HshaServer server(config.GetHshaServerConfig(), Dispatch, &service_args);
    server.RunForever();

    phxrpc::closelog();

    return 0;
}

