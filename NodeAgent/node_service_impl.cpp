/* node_service_impl.cpp

 Generated by phxrpc_pb2service from node.proto

*/

#include "node_service_impl.h"

#include "node_server_config.h"
#include "node.pb.h"
#include "phxrpc/file.h"
#include <sys/types.h>
#include <errno.h>

NodeServiceImpl::NodeServiceImpl(ServiceArgs_t &app_args)
    : args_(app_args) {
}

NodeServiceImpl::~NodeServiceImpl() {
}

int NodeServiceImpl::PhxMqttConnect(const phxrpc::MqttConnectPb &req, phxrpc::MqttConnackPb *resp) {
    return 0;
}

int NodeServiceImpl::PhxMqttPublish(const phxrpc::MqttPublishPb &req, phxrpc::MqttPubackPb *resp) {
    // TODO: process req.content()

    return -1;
}

int NodeServiceImpl::PhxMqttDisconnect(const phxrpc::MqttDisconnectPb &req) {
    return 0;
}

int NodeServiceImpl::PhxEcho(const google::protobuf::StringValue &req, google::protobuf::StringValue *resp) {
    resp->set_value(req.value());

    return 0;
}

int NodeServiceImpl::StartComponent(const magna::StartComponentRequest &req, magna::StartComponentResponse *resp) {
	pid_t pid = vfork();
	switch (pid)
	{
	case -1:
		printf("\n!!! fork failed\n");
		break;
	case 0:
		execlp(req.path().c_str(), req.param().c_str(), NULL);
		if (errno) printf("%d", errno);
		_exit(0);
		break;
	default:
		printf("\ncreate process: %d\n", pid);
		break;
	}

	resp->set_success(true);
	resp->set_ip("223.3.87.0"); // TODO
	resp->set_pid(pid);

    return 0;
}

int NodeServiceImpl::StopComponent(const magna::StopComponentRequest &req, magna::StopComponentResponse *resp) {
    return -1;
}

