/* node_tool_impl.cpp

 Generated by phxrpc_pb2tool from node.proto

*/

#include "node_tool_impl.h"
#include "node_client.h"

#include "phxrpc/file.h"

using namespace phxrpc;

NodeToolImpl:: NodeToolImpl()
{
}

NodeToolImpl:: ~NodeToolImpl()
{
}

int NodeToolImpl :: PHXEcho( phxrpc::OptMap & opt_map )
{
    google::protobuf::StringValue req;
    google::protobuf::StringValue resp;

    if( NULL == opt_map.Get( 's' ) ) return -1;

    req.set_value( opt_map.Get( 's' ) );

    NodeClient client;
    int ret = client.PHXEcho( req, &resp );
    printf( "%s return %d\n", __func__, ret );
    printf( "resp: {\n%s}\n", resp.DebugString().c_str() );

    return ret;
}

int NodeToolImpl :: StartComponent( phxrpc::OptMap & opt_map )
{
    magna::StartComponentRequest req;
    magna::StartComponentResponse resp;

    //TODO: fill req from opt_map


    NodeClient client;
    int ret = client.StartComponent( req, &resp );
    printf( "%s return %d\n", __func__, ret );
    printf( "resp: {\n%s}\n", resp.DebugString().c_str() );

    return ret;
}

int NodeToolImpl :: StopComponent( phxrpc::OptMap & opt_map )
{
    magna::StopComponentRequest req;
    magna::StopComponentResponse resp;

    //TODO: fill req from opt_map


    NodeClient client;
    int ret = client.StopComponent( req, &resp );
    printf( "%s return %d\n", __func__, ret );
    printf( "resp: {\n%s}\n", resp.DebugString().c_str() );

    return ret;
}

