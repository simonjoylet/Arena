/* simu_main.cpp

 Generated by phxrpc_pb2server from simu.proto

*/

#include <iostream>
#include <memory>
#include <unistd.h>
#include <signal.h>

#include "phxrpc_simu_dispatcher.h"
#include "simu_service_impl.h"
#include "simu_server_config.h"

#include "phxrpc/rpc.h"
#include "phxrpc/msg.h"
#include "phxrpc/file.h"
#include "SimuFunc.h"

using namespace std;

AdminClient * g_adminProxy;
std::mutex g_routerMutex;
map<string, ServiceSelector> g_serviceTable;
std::mutex g_rstDataMutex;
map<uint32_t, ReqLog> g_rstData;
std::mutex g_loadLogDataMutex;
vector<LoadLog> g_loadLogList;
uint32_t g_sendCount{ 0 };
uint32_t g_sendLamda{ 0 };

void Dispatch(const phxrpc::BaseRequest *request,
              phxrpc::BaseResponse *response,
              phxrpc::DispatcherArgs_t *args) {
    ServiceArgs_t *service_args = (ServiceArgs_t *)(args->service_args);

    SimuServiceImpl service(*service_args);
    SimuDispatcher dispatcher(service, args);

    phxrpc::BaseDispatcher<SimuDispatcher> base_dispatcher(
            dispatcher, SimuDispatcher::GetMqttFuncMap(),
            SimuDispatcher::GetURIFuncMap());
    if (!base_dispatcher.Dispatch(request, response)) {
        response->DispatchErr();
    }
}

void ShowUsage(const char *program) {
    printf("\n");
    printf("Usage: %s [-c <config>] [-d] [-l <log level>] [-v]\n", program);
    printf("\n");

    exit(0);
}

int main(int argc, char **argv) {
    const char *config_file{nullptr};
    bool daemonize{false};
    int log_level{-1};
    extern char *optarg;
    int c;
    while (EOF != (c = getopt(argc, argv, "c:vl:d"))) {
        switch (c) {
            case 'c' : config_file = optarg; break;
            case 'd' : daemonize = true; break;
            case 'l' : log_level = atoi(optarg); break;

            case 'v' :
            default: ShowUsage(argv[0]); break;
        }
    }

    if (daemonize) phxrpc::ServerUtils::Daemonize();

    assert(signal(SIGPIPE, SIG_IGN) != SIG_ERR);

    //set customize log/monitor
    //phxrpc::setlog(openlog, closelog, vlog);
    //phxrpc::MonitorFactory::SetFactory(new YourSelfsMonitorFactory());

    if (nullptr == config_file) ShowUsage(argv[0]);

    SimuServerConfig config;
    if (!config.Read(config_file)) ShowUsage(argv[0]);

    if (log_level > 0) config.GetHshaServerConfig().SetLogLevel(log_level);

    phxrpc::openlog(argv[0], config.GetHshaServerConfig().GetLogDir(),
            config.GetHshaServerConfig().GetLogLevel());

    ServiceArgs_t service_args;
    service_args.config = &config;
    phxrpc::HshaServer server(config.GetHshaServerConfig(), Dispatch, &service_args);


	// 准备
	AdminClient::Init("../AdminServer/admin_client.conf");
	CompClient::Init("../Comp/comp_client.conf");
	g_adminProxy = new AdminClient;

// 	// 启动路由表更新
// 	std::thread routerTh(UpdateServiceTable);
// 	// 模拟代码
// 	map<uint32_t, string> trafficFiles;
// 	trafficFiles.insert(make_pair(100, "../TrafficGenerator/simu1.dat"));
// 	trafficFiles.insert(make_pair(200, "../TrafficGenerator/simu2.dat"));
// 	trafficFiles.insert(make_pair(300, "../TrafficGenerator/simu3.dat"));
// 	auto func = [&trafficFiles]()
// 	{
// 		SimuAll(trafficFiles, "simu_magna.stress");
// 	};
// 	std::thread simuTh(func);

	// 压测代码
	phxrpc::Endpoint_t ep;
	strcpy(ep.ip, "223.3.87.60");
	ep.port = 23307;
	map<int, string> trafficFiles;
	const char * filePathTemplate = "../TrafficGenerator/Comp_1_%d.dat";
	for (int i = 1; i <= 10; ++i)
	{
		int lamda = 10 * i;
		char filePath[64] = {};
		sprintf(filePath, filePathTemplate, lamda);
		trafficFiles.insert(make_pair(lamda, filePath));
	}
	auto tmpfun = [&]()
	{
		Stress("Comp_1", ep, trafficFiles);
	};
	std::thread stressTh(tmpfun);

    server.RunForever();

    phxrpc::closelog();

    return 0;
}

